---
import pkg from '../../package.json' assert { type: 'json' };
import { getFromCookies } from '../api/Auth';
import { SITE_TITLE } from './constants.js';
import { envConfig } from '../config/envConfig';
import { excludeKeys } from '../config/CommonConstant';

const { class: clazz, metaData } = Astro.props;

const allEnvKeys = [...Object.keys(process.env), ...Object.keys(import.meta.env)];

if (allEnvKeys.length === 0) {
  throw new Error('No environment keys were found in process.env or import.meta.env.');
}

const exposedEnvKeys = allEnvKeys.filter((key) => !excludeKeys.includes(key));

const initData: Record<string, any> = {};

allEnvKeys.forEach((key) => {
  const value = process.env[key] || import.meta.env[key];
  
  if (!value) return; 
  
  if (!excludeKeys.includes(key)) {
    initData[key] = value;
  }
});

const sessionToken = getFromCookies(Astro.cookies, 'session');
const refreshToken = getFromCookies(Astro.cookies, 'refresh');
---

<!DOCTYPE html>
<html lang="en">
	<head set:html={metaData}>
		<title>{SITE_TITLE} — v{pkg.version}</title>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={pkg.description} />
		<link rel="icon" href={'/favicon.ico'} />
		<link rel="sitemap" type="application/xml" href={'/sitemap-index.xml'} />

		<meta name="author" content="Julian Cataldo, Zoltán Szőgyényi, Robert Tanislav" />
		<meta name="copyright" content="MIT" />
		<meta property="og:image" content={envConfig.PLATFORM_DATA.logo} />

		<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap"
			rel="stylesheet"
		/>

		<meta property="og:image" content={initData.PUBLIC_PLATFORM_LOGO} />
		<script is:inline id="theme">
			if (
				localStorage.getItem('color-theme') === 'dark' ||
				(!('color-theme' in localStorage) &&
					window.matchMedia('(prefers-color-scheme: dark)').matches)
			) {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}
		</script>
	</head>

	<body
		class:list={[
			,
			// clazz, 'bg-gray-50 dark:bg-gray-800'
			'scrollbar scrollbar-w-3 scrollbar-thumb-rounded-[0.25rem]',
			'scrollbar-track-slate-200  scrollbar-thumb-gray-400',
			'dark:scrollbar-track-gray-900 dark:scrollbar-thumb-gray-700',
			'dark:bg-[#111827]',
		]}
	>
		<slot />
		<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.0/flowbite.min.js"></script>

		<script
			id="global"
			define:vars={{ initData, exposedEnvKeys, sessionToken, refreshToken }}
		>
			exposedEnvKeys.forEach((item) => {
				globalThis[item] = initData[item];
			});

			globalThis.access_token = sessionToken;
			globalThis.refresh_token = refreshToken;
		</script>

		<style is:global>
			body {
				font-family: 'Inter', sans-serif;
			}

			.font-courier {
				font-family: 'Courier Prime', monospace;
			}

			/* Scrollbar design */
			::-webkit-scrollbar {
				width: 7px;
				height: 7px;
			}
			::-webkit-scrollbar-track-piece {
				background: #eee;
			}
			::-webkit-scrollbar-thumb {
				background: #9a9a9a;
			}
		</style>
	</body>
</html>